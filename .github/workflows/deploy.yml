name: Deploy Poller and Page

on:
  push:
    branches:
      - main
#    paths:
#      - "poller/**"
#      - ".github/workflows/deploy.yml"
#      - "config.json"
#      - "types/src/**"
#      - "poller/wrangler.toml"
  repository_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"
#      - run: bash -c "test -e yarn.lock && rm yarn.lock"
#       "redis-on-workers": "*",
      - name: Get machine cache key
        id: get-machine
        run: |
          echo -n "machine=$(uname -m)" >> $GITHUB_OUTPUT
        shell: bash
      - name: Get code cache key
        id: get-code-cachekey
        run: |
          sum=$((find poller types -type f  ;echo .yarnrc.yml ) |while read a ;do cat $a ;done|md5sum|cut -d" " -f1) 
          sum=$((find poller types -type f  ;echo .yarnrc.yml ) |while read a ;do cat $a ;done|md5sum|cut -d" " -f1) 
          echo -n "codecachekey=$sum" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache yarn Poller
        id: cache-yarn-Poller
        uses: actions/cache@v4
        with:
          save-always: true
          path: poller/.yarn
          #key: ${{ steps.get-machine.outputs.machine }}-yarn-${{ hashFiles('poller/src/**') }}-${{ hashFiles('poller/.yarn**') }}-${{ hashFiles('site/**') }}-${{ hashFiles('.yarnrc.yml') }}
          key: ${{ steps.get-machine.outputs.machine }}-yarn-poller-${{ hashFiles('poller/src/**') }}-${{ hashFiles('.yarnrc.yml') }}
          #key: ${{ steps.get-machine.outputs.machine }}-yarn-${{ steps.get-code-cachekey.outputs.codecachekey }}
      - name: Cache yarn
        id: cache-yarn
        uses: actions/cache@v4
        with:
          save-always: true
          path: .yarn
          key: ${{ steps.get-machine.outputs.machine }}-yarn-${{ hashFiles('.yarnrc.yml') }}
          #key: ${{ steps.get-machine.outputs.machine }}-yarn-${{ steps.get-code-cachekey.outputs.codecachekey }}
      - run: bash -c "yarn add redis-on-workers || true; yarn config get enableImmutableInstalls ; echo '--install.no-lockfile true' >> $HOME/.yarnrc;export YARN_ENABLE_IMMUTABLE_INSTALLS=true; yarn install --refresh-lockfile"
      - run: yarn install
        working-directory: poller
      - run: yarn build
        working-directory: poller
      - name: Publish
        uses: cloudflare/wrangler-action@v3
        with:
          workingDirectory: poller
          apiToken: ${{ secrets.CF_API_TOKEN }}
          wranglerVersion: "4.29.0"
          preCommands: |
            #wrangler --help|grep kv
            #wrangler kv namespace list
            #wrangler kv:namespace list
            npx wrangler kv namespace list
            which jq || ( sudo apt-get update && sudo apt-get install -y jq)
            (  npx wrangler kv:namespace list > namespaces.json ) || (  npx wrangler kv namespace list  > namespaces.json )
            cat namespaces.json
            echo "___1"
            cat namespaces.json|jq -c 'map(select(.title | contains("KV_STATUS_PAGE")))' 
            echo "___2"
            ( cat namespaces.json| jq -c 'map(select(.title | contains("KV_STATUS_PAGE")))' | jq -r ".[0].id" )
            ( cat namespaces.json| jq -c 'map(select(.title | contains("KV_STATUS_PAGE")))' | jq -r ".[0].id" ) > kvnamespace
            echo "___3"
            grep KV_STATUS_PAGE namespaces.json || echo "empty KV .. generating"; 
            grep KV_STATUS_PAGE namespaces.json || (npx wrangler kv:namespace create KV_STATUS_PAGE   ||   npx wrangler kv namespace create KV_STATUS_PAGE )
            grep KV_STATUS_PAGE namespaces.json || (npx wrangler kv:namespace list > namespaces.json  ||   npx wrangler kv namespace list  > namespaces.json )
            echo "___4"
            cat namespaces.json| jq -c 'map(select(.title | contains("KV_STATUS_PAGE")))' | jq -r ".[0].id"  > kvnamespace
            cat kvnamespace
            wc -c kvnamespace
            wc -c kvnamespace | grep "^33 kvnamespace$"  || echo "empty KV namespace..failing..."
            wc -c kvnamespace | grep "^33 kvnamespace$"  || exit 1
            echo "___5"
            #KV_NAMESPACE_ID=$(cat kvnamespace)
            echo "[env.production]" >> wrangler.toml
            echo "kv_namespaces = [{binding=\"KV_STATUS_PAGE\", id=\""$(cat kvnamespace)"\"}]" >> wrangler.toml
          postCommands: |
            bash -c "yarn add redis-on-workers || true; yarn config get enableImmutableInstalls ; echo '--install.no-lockfile true' >> $HOME/.yarnrc;export YARN_ENABLE_IMMUTABLE_INSTALLS=true; yarn install --refresh-lockfile"
            yarn kv-gc
          environment: production
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          YARN_IGNORE_NODE: 1
         #cp -rv .yarn .yarnrc.yml yarn.lock site && node ./scripts/removeLocalDeps.js && cd site && yarn install --mode=update-lockfile && npx @cloudflare/next-on-pages@1        
      - name: build page
        #run: cp -rv .yarn .yarnrc.yml yarn.lock site && node ./scripts/removeLocalDeps.js && cd site && yarn install --mode=update-lockfile && npx @cloudflare/next-on-pages@1
        run: cp -rv .yarn .yarnrc.yml yarn.lock site && node ./scripts/removeLocalDeps.js && cd site && yarn install --mode=update-lockfile && npx next build 
        working-directory: .
      - name: patch functions
        #run: cp -rv functions  site/.vercel/output/static
        run: cp -rv functions  site/out
        working-directory: .
      - name: show files
        run: cd site/out && ls -lh1 
        #run: cd  site/.vercel/output/static && ls -lh1 
        working-directory: .
      - name: Deploy page
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId:  ${{ secrets.CF_ACCOUNT_ID }}
          #command:  pages deploy site/.vercel/output/static --project-name=${{  vars.PROJECT_NAME || 'upcloudflare' }}
          command:  pages deploy site/out --project-name=${{  vars.PROJECT_NAME || 'upcloudflare' }}
          # Optional: Enable this if you want to have GitHub Deployments triggered
          # gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        #env:
        #  PROJECT_NAME: ${{  vars.PROJECT_NAME || 'upcloudflare' }}
        #  #PROJECT_NAME: ${{ secrets.PROJECT_NAME || 'upcloudflare' }}
        #  #PROJECT_NAME: ${{ github.event.inputs.PROJECT_NAME || 'upcloudflare' }}
          
          