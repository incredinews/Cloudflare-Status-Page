name: Deploy Poller and Page

on:
  push:
    branches:
      - main
#    paths:
#      - "poller/**"
#      - ".github/workflows/deploy.yml"
#      - "config.json"
#      - "types/src/**"
#      - "poller/wrangler.toml"
  repository_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"
#      - run: bash -c "test -e yarn.lock && rm yarn.lock"
#       "redis-on-workers": "*",
      - name: Get machine cache key
        id: get-machine
        run: |
          echo -n "machine=$(uname -m)" >> $GITHUB_OUTPUT
        shell: bash
      - name: Get code cache key
        id: get-code-cachekey
        run: |
          bash -c "cd poller;ln -s ../.yarn"|| true
          sum=$((find poller types -type f  ;echo .yarnrc.yml ) |while read a ;do cat $a ;done|md5sum|cut -d" " -f1) 
          sum=$((find poller types -type f  ;echo .yarnrc.yml ) |while read a ;do cat $a ;done|md5sum|cut -d" " -f1) 
          echo -n "codecachekey=$sum" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache next_npm
        id: cache-next
        uses: actions/cache@v4
        with:
          # See here for caching with `yarn`, `bun` or other package managers https://github.com/actions/cache/blob/main/examples.md or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
            .yarn
            node_modules
            site/node_modules
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs
#      - name: Cache yarn Poller
#        id: cache-yarn-Poller
#        uses: actions/cache@v4
#        with:
#          save-always: true
#          path: poller/.yarn
#          #key: ${{ steps.get-machine.outputs.machine }}-yarn-${{ hashFiles('poller/src/**') }}-${{ hashFiles('poller/.yarn**') }}-${{ hashFiles('site/**') }}-${{ hashFiles('.yarnrc.yml') }}
#          key: ${{ steps.get-machine.outputs.machine }}-yarn-poller-${{ hashFiles('poller/src/**') }}-${{ hashFiles('.yarnrc.yml') }}
#          #key: ${{ steps.get-machine.outputs.machine }}-yarn-${{ steps.get-code-cachekey.outputs.codecachekey }}
#      - name: Cache yarn
#        id: cache-yarn
#        uses: actions/cache@v4
#        with:
#          save-always: true
#          path: .yarn
#          key: ${{ steps.get-machine.outputs.machine }}-yarn-${{ hashFiles('.yarnrc.yml') }}
#          #key: ${{ steps.get-machine.outputs.machine }}-yarn-${{ steps.get-code-cachekey.outputs.codecachekey }}
      - run: bash -c "yarn add redis-on-workers || true; yarn config get enableImmutableInstalls ; echo '--install.no-lockfile true' >> $HOME/.yarnrc;export YARN_ENABLE_IMMUTABLE_INSTALLS=true; yarn install --refresh-lockfile"
      - run: yarn install
        working-directory: poller
      - run: yarn build
        working-directory: poller
      - name: Always Save yarn-cache
        id: cache-yarn-save
        if: always() && steps.cache-prime-numbers-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          key: ${{ steps.get-machine.outputs.machine }}-yarn-pre
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
            .yarn
            node_modules
            site/node_modules
      - name: Publish
        uses: cloudflare/wrangler-action@v3
        with:
          workingDirectory: poller
          apiToken: ${{ secrets.CF_API_TOKEN }}
          wranglerVersion: "4.29.0"
          preCommands: |
            #wrangler --help|grep kv
            #wrangler kv namespace list
            #wrangler kv:namespace list
            npx wrangler kv namespace list
            which jq || ( sudo apt-get update && sudo apt-get install -y jq)
            (  npx wrangler kv:namespace list > namespaces.json ) || (  npx wrangler kv namespace list  > namespaces.json )
            cat namespaces.json
            echo "___1"
            cat namespaces.json|jq -c 'map(select(.title | contains("KV_STATUS_PAGE")))' 
            echo "___2"
            ( cat namespaces.json| jq -c 'map(select(.title | contains("KV_STATUS_PAGE")))' | jq -r ".[0].id" )
            ( cat namespaces.json| jq -c 'map(select(.title | contains("KV_STATUS_PAGE")))' | jq -r ".[0].id" ) > kvnamespace
            echo "___3"
            grep KV_STATUS_PAGE namespaces.json || echo "empty KV .. generating"; 
            grep KV_STATUS_PAGE namespaces.json || (npx wrangler kv:namespace create KV_STATUS_PAGE   ||   npx wrangler kv namespace create KV_STATUS_PAGE )
            grep KV_STATUS_PAGE namespaces.json || (npx wrangler kv:namespace list > namespaces.json  ||   npx wrangler kv namespace list  > namespaces.json )
            echo "___4"
            cat namespaces.json| jq -c 'map(select(.title | contains("KV_STATUS_PAGE")))' | jq -r ".[0].id"  > kvnamespace
            cat kvnamespace
            wc -c kvnamespace
            wc -c kvnamespace | grep "^33 kvnamespace$"  || echo "empty KV namespace..failing..."
            wc -c kvnamespace | grep "^33 kvnamespace$"  || exit 1
            echo "___5"
            #KV_NAMESPACE_ID=$(cat kvnamespace)
            echo "[env.production]" >> wrangler.toml
            echo "kv_namespaces = [{binding=\"KV_STATUS_PAGE\", id=\""$(cat kvnamespace)"\"}]" >> wrangler.toml
            echo $D1LOC > d1location
            npx wrangler d1 list --json
            cat d1location|grep -e "^weur$" -e "^eeur$" -e "^apac$" -e "^oc$" -e "^wnam$" -e "^enam$" || (echo "weur" > d1location)
            npx wrangler d1 list --json|grep STATUS_PAGE || npx wrangler d1 create STATUS_PAGE  --location $(cat d1location)
            echo 'CREATE TABLE IF NOT EXISTS config ("profile" integer DEFAULT 0 PRIMARY KEY,"cfgdata" text);' > init.sql 
            echo 'CREATE TABLE IF NOT EXISTS info ("id" text PRIMARY KEY,"record" text);'                      >> init.sql
            echo 'CREATE TABLE IF NOT EXISTS ping ("ts" INTEGER PRIMARY KEY,"day" text,"loc" text,"ms" text);' >> init.sql
            npx wrangler d1 list --json |grep STATUS_PAGE||exit 1
            npx wrangler d1 list --json|jq -c '.[]'|grep '"STATUS_PAGE"'|head -n1 |jq -r .uuid >> namespace.db
            echo "d1_databases = [{binding=\"STATUS_PAGE\", database_name=\"STATUS_PAGE\", database_id=\""$(cat namespace.db)"\"}]" >> wrangler.toml
            echo "[[d1_databases]]" >> wrangler.toml
            echo "binding = \"DB\"" >> wrangler.toml
            echo "database_name = \"STATUS_PAGE\"" >> wrangler.toml
            echo "database_id = \""$(cat namespace.db)"\"" >> wrangler.toml

            npx wrangler d1 execute STATUS_PAGE --remote --file init.sql      
          postCommands: |
            bash -c "yarn add redis-on-workers || true; yarn config get enableImmutableInstalls ; echo '--install.no-lockfile true' >> $HOME/.yarnrc;export YARN_ENABLE_IMMUTABLE_INSTALLS=true; yarn install --refresh-lockfile"
            yarn kv-gc
          environment: production
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          YARN_IGNORE_NODE: 1
         #cp -rv .yarn .yarnrc.yml yarn.lock site && node ./scripts/removeLocalDeps.js && cd site && yarn install --mode=update-lockfile && npx @cloudflare/next-on-pages@1        
      - name: build page
        #run: cp -rv .yarn .yarnrc.yml yarn.lock site && node ./scripts/removeLocalDeps.js && cd site && yarn install --mode=update-lockfile && npx @cloudflare/next-on-pages@1
        run: cp -rv  .yarnrc.yml yarn.lock site && bash -c "cd site ;ln -s ../.yarn . ; ln -s ../poller/node_modules . || true "  && node ./scripts/removeLocalDeps.js && cd site && yarn install --mode=update-lockfile && npx next build && pwd && du -m -s *
        working-directory: .
      - name: patch functions
        #run: cp -rv functions  site/.vercel/output/static
        run: cp -rv _routes.json functions site && cp -rv functions _routes.json assets site/dist && cp site/src/app/favicon.ico site/dist && wget -c https://d3js.org/d3.v7.min.js -O site/dist/assets/d3.v7.min.js && wget -c https://d3js.org/d3-array.v2.min.js -O site/dist/assets/d3-array.v2.min.js  && wget -c https://d3js.org/d3-scale-chromatic.v1.min.js -O site/dist/assets/d3-scale-chromatic.v1.min.js
        working-directory: .
      - name: show files
        run: cd site/dist && ls -lh1 
        #run: cd  site/.vercel/output/static && ls -lh1 
        working-directory: .
#      - name: Cache yarn
#        id: cache-yarn-page
#        uses: actions/cache@v4
#        with:
#          save-always: true
#          path: .yarn
#          key: ${{ steps.get-machine.outputs.machine }}-yarnpage-${{ hashFiles('.yarnrc.yml') }}
#          #key: ${{ steps.get-machine.outputs.machine }}-yarnpage-${{ steps.get-code-cachekey.outputs.codecachekey }}
      - name: replace ts config
        id: replace-ts-config
        run: |
          cd site && pwd && ls && rm tsconfig.json
        shell: bash
      - name: Deploy page
        uses: cloudflare/wrangler-action@v3
        with:
          workingDirectory: site
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId:  ${{ secrets.CF_ACCOUNT_ID }}
          #command:  pages deploy site/.vercel/output/static --project-name=${{  vars.PROJECT_NAME || 'upcloudflare' }}
          command:  pages deploy ./dist --project-name=${{  vars.PROJECT_NAME || 'upcloudflare' }}
          # Optional: Enable this if you want to have GitHub Deployments triggered
          # gitHubToken: ${{ secrets.GITHUB_TOKEN }}
        #env:
        #  PROJECT_NAME: ${{  vars.PROJECT_NAME || 'upcloudflare' }}
        #  #PROJECT_NAME: ${{ secrets.PROJECT_NAME || 'upcloudflare' }}
        #  #PROJECT_NAME: ${{ github.event.inputs.PROJECT_NAME || 'upcloudflare' }}
          
          