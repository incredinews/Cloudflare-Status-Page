name: Deploy Poller

on:
  push:
    branches:
      - main
    paths:
      - "poller/**"
      - ".github/workflows/deployPoller.yml"
      - "config.json"
  repository_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20.x"
#      - run: bash -c "test -e yarn.lock && rm yarn.lock"
#       "redis-on-workers": "*",
      - run: bash -c "yarn add redis-on-workers || true; yarn config get enableImmutableInstalls ; echo '--install.no-lockfile true' >> $HOME/.yarnrc;export YARN_ENABLE_IMMUTABLE_INSTALLS=true; yarn install --refresh-lockfile"
      - name: Get machine cache key
        id: get-machine
        run: |
          echo -n "machine=$(uname -m)" >> $GITHUB_OUTPUT
        shell: bash
      - name: Get code cache key
        id: get-code-cachekey
        run: |
          sum=$((find -type f app  site scripts ;echo .yarnrc.yml poller/package.json poller/tsconfig.json ) |while read a ;do cat $a ;done|md5sum|cut -d" " -f1) 
          echo -n "codecachekey=$sum" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache yarn
        id: cache-yarn
        uses: actions/cache@v4
        with:
          path: poller/.yarn
          #key: ${{ steps.get-machine.outputs.machine }}-yarn-${{ hashFiles('app/**') }}-${{ hashFiles('poller/**') }}-${{ hashFiles('site/**') }}-${{ hashFiles('scripts/**') }}-${{ hashFiles('.yarnrc.yml') }}
          key: ${{ steps.get-machine.outputs.machine }}-yarn-${{ steps.get-code-cachekey.outputs.codecachekey }}
      - name: Cache yarn Poller
        id: cache-yarn-poller
        uses: actions/cache@v4
        with:
          path: .yarn
         #key: ${{ steps.get-machine.outputs.machine }}-yarn_poller-${{ hashFiles('app/**') }}-${{ hashFiles('poller/**') }}-${{ hashFiles('site/**') }}-${{ hashFiles('scripts/**') }}-${{ hashFiles('.yarnrc.yml') }}
          key: ${{ steps.get-machine.outputs.machine }}-yarn_poller-${{ steps.get-code-cachekey.outputs.codecachekey }}
      - run: yarn build
        working-directory: poller
      - name: Publish
        uses: cloudflare/wrangler-action@v3
        with:
          workingDirectory: poller
          apiToken: ${{ secrets.CF_API_TOKEN }}
          wranglerVersion: "4.29.0"
          preCommands: |
            #wrangler --help|grep kv
            #wrangler kv namespace list
            #wrangler kv:namespace list
            npx wrangler kv namespace list
            which jq || ( sudo apt-get update && sudo apt-get install -y jq)
            export KV_NAMESPACE_JSON=$(  npx wrangler kv:namespace list ) || export KV_NAMESPACE_JSON=$(  npx wrangler kv namespace list )
            echo "$KV_NAMESPACE_JSON" |jq -c 'map(select(.title | contains("KV_STATUS_PAGE")))' 
            echo ...
            echo "$KV_NAMESPACE_JSON" |jq -c 'map(select(.title | contains("KV_STATUS_PAGE")))' | jq -r ".[0].id"
            export KV_NAMESPACE_ID=$( echo "$KV_NAMESPACE_JSON" | jq -c 'map(select(.title | contains("KV_STATUS_PAGE")))' | jq -r ".[0].id" || true  ) || true 
            echo -n "$KV_NAMESPACE_ID"|wc -c |grep ^0$ &&  { echo empty KV .. generating ; (npx wrangler kv:namespace create KV_STATUS_PAGE || npx wrangler kv namespace create KV_STATUS_PAGE ) || true ;             export KV_NAMESPACE_JSON=$(  npx wrangler kv:namespace list ) || export KV_NAMESPACE_JSON=$(  npx wrangler kv namespace list )  ; } ;
            export KV_NAMESPACE_ID=$( echo "$KV_NAMESPACE_JSON" | jq -c 'map(select(.title | contains("KV_STATUS_PAGE")))' | jq -r ".[0].id"  )
            echo -n "$KV_NAMESPACE_ID"|wc -c |grep ^0$ && echo empty KV namespace..failing
            echo -n "$KV_NAMESPACE_ID"|wc -c |grep ^0$ && exit 1
            echo "[env.production]" >> wrangler.toml
            echo "kv_namespaces = [{binding=\"KV_STATUS_PAGE\", id=\"${KV_NAMESPACE_ID}\"}]" >> wrangler.toml
          postCommands: |
            yarn kv-gc
          environment: production
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          YARN_IGNORE_NODE: 1
